#include"basicinterpreter.h"
#include<algorithm>
#include<cctype>
void changestring(std::string&dest)
{
	std::transform(dest.begin(),dest.end(),dest.begin(),::tolower);
}
std::string getvaluename(std::stringstream& token)
{
	char c=0;
	std::string name;
	while(true)
	{
		token.get(c);
		if(c!=' ')
		{
			token.putback(c);
			break;
		}
	}
	while(true)
	{
		token.get(c);
		if(c=='='||c==' '||c=='\n'||token.eof())
		{
			token.putback(c);
			break;
		}
		name.push_back(c);
	}
	return name;
}

Basicline::Basicline(){}
Basicline::~Basicline(){}
//class Rem
Remline::Remline(std::string raw):linenum(0){
	std::stringstream token(raw);
	token>>linenum;
}
Remline::~Remline(){}
void Remline::Eval(){}
enum Basicinstruction Remline::kind(){Basicinstruction kd=REM;return kd;}
unsigned int Remline::Linenum(){return linenum;}

//class Let
Letline::Letline(std::string raw):linenum(0){
	std::stringstream token(raw);
	token>>linenum;
	std::string temp;
	char tempc;
	token>>temp;
	vname=getvaluename(token);
	token>>tempc;
	if(tempc!='=')
	{
		Usererror ur=WE;
		throw ur;
	}
	exp=readE(token,0);
}
Letline::~Letline()
{
	delete exp;
}
enum Basicinstruction Letline::kind(){Basicinstruction kd=LET;return kd;}
unsigned int Letline::Linenum(){return linenum;}
void Letline::Eval(){
	std::map<std::string,int>::iterator it;
	if((it=registers.find(vname))==registers.end())
		registers[vname]=0;
	registers[vname]=exp->Eval();
}

//class Print
Printline::Printline(std::string raw):linenum(0){
	std::stringstream token(raw);
	token>>linenum;
	std::string temp;
	token>>temp;
	vname=getvaluename(token);
}
Printline::~Printline(){}
void Printline::Eval(){
	std::map<std::string,int>::iterator it;
	if((it=registers.find(vname))==registers.end())
	{
		Usererror ur=VND;
		throw ur;
	}
	//std::cout<<vname<<'\n';
	//std::cout<<registers[vname]<<'\n';
}
enum Basicinstruction Printline::kind(){Basicinstruction kd=PRINT;return kd;}
unsigned int Printline::Linenum(){return linenum;}

//class Input
Inputline::Inputline(std::string raw):linenum(0){
	std::stringstream token(raw);
	token>>linenum;
	std::string temp;
	token>>temp;
	vname=getvaluename(token);
}
Inputline::~Inputline(){}
void Inputline::Eval(){
	std::map<std::string,int>::iterator it;
	if((it=registers.find(vname))==registers.end())
		registers[vname]=0;
	std::cout<<'?';
	std::cin>>registers[vname];
	if(!std::cin)
	{
		Usererror ur=NN;
		throw ur;
	}
}
enum Basicinstruction Inputline::kind(){Basicinstruction kd=INPUT;return kd;}
unsigned int Inputline::Linenum(){return linenum;}

//class End
Endline::Endline(std::string raw):linenum(0){
	std::stringstream token(raw);
	token>>linenum;
}
Endline::~Endline(){}
void Endline::Eval(){}
enum Basicinstruction Endline::kind(){Basicinstruction kd=END;return kd;}
unsigned int Endline::Linenum(){return linenum;}

//class Goto
Gotoline::Gotoline(std::string raw,void*basic):linenum(0),dest(0),basicitp(basic){
	std::stringstream token(raw);
	token>>linenum;
	std::string temp;
	token>>temp;
	std::cin>>dest;
	if(!std::cin)
	{
		Usererror ur=WE;
		throw ur;
	}
}
Gotoline::~Gotoline(){}
void Gotoline::Eval(){
	((Basicinterpreter*)basicitp)->changepc(dest);
}
enum Basicinstruction Gotoline::kind(){Basicinstruction kd=GOTO;return kd;}
unsigned int Gotoline::Linenum(){return linenum;}

//class If
Ifline::Ifline(std::string raw,void*basic):linenum(0),dest(0),basicitp(basic){
	std::stringstream token(raw);
	token>>linenum;
	std::string temp;
	token>>temp;
	left=readE(token,0);
	token>>op;
	if(!(op=='='||op=='>'||op=='<'))
	{
		Usererror kd=WE;
		throw kd;
	}
	right=readE(token,0);
	token>>temp;
	if(temp!="then")
	{
		Usererror kd=WE;
		throw kd;
	}
	token>>dest;
	if(!token)
	{
		Usererror kd=WE;
		throw kd;
	}
	//std::cout<<left->toString()<<'\n';
	//std::cout<<right->toString()<<'\n';
}
Ifline::~Ifline(){
	delete left;
	delete right;
}
void Ifline::Eval(){
	bool resualt=false;
	switch(op)
	{
	case'<':
		if((left->Eval())<(right->Eval()))
			resualt=true;
		break;
	case'=':
		if((left->Eval())==(right->Eval()))
			resualt=true;
		break;
	case'>':
		if((left->Eval())>(right->Eval()))
			resualt=true;
		break;
	}
	if(resualt)
	{
		((Basicinterpreter*)basicitp)->changepc(dest);
	}
}
enum Basicinstruction Ifline::kind(){Basicinstruction kd=IF;return kd;}
unsigned int Ifline::Linenum(){return linenum;}

//class Basicinterpreter
Basicinterpreter::Basicinterpreter():pc(0){}
void Basicinterpreter::deletelines(){
	for(int i=0;i<lines.size();i++)
	{
		delete lines[i];
	}
	lines.clear();
}
Basicinterpreter::~Basicinterpreter(){deletelines();}
void Basicinterpreter::addline(Basicline* line){
	unsigned int linenum=line->Linenum();
	for(int i=0;i<lines.size();i++)
	{
		if(lines[i]->Linenum()==linenum)
		{
			delete lines[i];
			lines[i]=line;
			return;
		}
		if(lines[i]->Linenum()>linenum)
		{
			lines.insert(lines.begin()+i,line);
			return;
		}
	}
	//if linenum > all lines linenum,add this line to the end of lines
	lines.push_back(line);
}
void Basicinterpreter::changepc(unsigned int dest){pc=dest;}
void Basicinterpreter::Eval(){
	if(lines.size()==0)
		return;
	registers.clear();
	pc=lines[0]->Linenum();
	while(true)
	{
		Basicline * evalline=0;
		for(int i=0;i<lines.size();i++)
		{
			if(lines[i]->Linenum()==pc)
			{
				evalline=lines[i];
				if(i<lines.size()-1)
				{
					pc=lines[i+1]->Linenum();
				}
				else
				{
					pc++;
				}
				break;
			}
		}
		if(evalline==0)
			return;
		else
		{
			if(evalline->kind()==Basicinstruction::END)
				return;
			evalline->Eval();
		}
	}
}
void Basicinterpreter::run(){
	while(true)
	{
		try{
			std::string temp;
			while(temp.empty())
			{
				getline(std::cin,temp);
			}
			std::string rawtemp=temp;
			changestring(temp);
			if(temp=="quit")
				break;
			if(temp=="list")
			{
				for(int i=0;i<rawlines.size();i++)
				{
					std::cout<<rawlines[i]<<'\n';
				}
				continue;
			}
			if(temp=="clear")
			{
				rawlines.clear();
				deletelines();
				continue;
			}
			if(temp=="help")
			{
				std::cout<<"